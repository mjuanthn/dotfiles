{
  "version": 3,
  "sources": ["../src/index.tsx", "../src/constants.tsx", "../src/utils.tsx", "../src/videos.tsx", "../src/storage.tsx"],
  "sourcesContent": ["import {\n  Action,\n  ActionPanel,\n  Clipboard,\n  FileSystemItem,\n  Form,\n  Toast,\n  getSelectedFinderItems,\n  showToast,\n  useNavigation,\n} from \"@raycast/api\";\nimport { useEffect, useState } from \"react\";\nimport { COMPRESSION_OPTIONS, CompressionOptionKey, DEFAULT_COMPRESSION, VIDEO_FORMATS } from \"./constants\";\nimport {\n  capitalizeSnakeCase,\n  compressVideoFiles,\n  fileExists,\n  fileName,\n  isFileFormatSupported,\n  normalizeFilePath,\n  unique,\n} from \"./utils\";\nimport { Videos } from \"./videos\";\n\nexport default function Command() {\n  const [files, _setFiles] = useState<string[]>([]);\n  const [removedFiles, setRemovedFiles] = useState<string[]>([]);\n  const [clipboard, setClipboard] = useState<Clipboard.ReadContent | null>(null);\n  const [selectedFinderItems, setSelectedFinderItems] = useState<FileSystemItem[] | null>(null);\n  const [autoLoaded, setAutoLoaded] = useState(false);\n  const [compression, setCompression] = useState<CompressionOptionKey>(DEFAULT_COMPRESSION);\n  const navigation = useNavigation();\n\n  // Fake hook setter to ensure that perform some wanted operations\n  const setFiles = (newFiles: string[], automaticallyAdded = false) => {\n    newFiles = unique(newFiles.map(normalizeFilePath));\n\n    const isFileBeingRemoved = newFiles.length < files.length;\n    if (isFileBeingRemoved) {\n      const fileBeingRemoved = files.find((file) => !newFiles.includes(file));\n      setRemovedFiles([...removedFiles, fileBeingRemoved!]);\n    } else if (automaticallyAdded) {\n      setAutoLoaded(true);\n      // avoid adding files that we automatically added but the user removed\n      newFiles = newFiles.filter((file) => !removedFiles.includes(file));\n    } else {\n      // all new legit files should be deleted from the removed files list\n      setRemovedFiles(removedFiles.filter((file) => !newFiles.includes(file)));\n    }\n\n    newFiles = newFiles.filter(fileExists);\n\n    return _setFiles(newFiles);\n  };\n\n  useEffect(() => {\n    const lookForVideoSources = () => {\n      Clipboard.read().then(setClipboard);\n      getSelectedFinderItems()\n        .then(setSelectedFinderItems)\n        .catch(() => setSelectedFinderItems([]));\n    };\n    lookForVideoSources();\n  }, [setClipboard, setSelectedFinderItems]);\n\n  useEffect(() => {\n    if (clipboard && \"file\" in clipboard && !files.includes(clipboard.file!)) {\n      if (clipboard.file && isFileFormatSupported(clipboard.file)) {\n        setFiles([...files, clipboard.file!], true);\n      }\n    }\n  }, [clipboard]);\n\n  useEffect(() => {\n    if (selectedFinderItems) {\n      for (const item of selectedFinderItems) {\n        if (item.path && isFileFormatSupported(item.path)) {\n          setFiles([...files, item.path], true);\n        }\n      }\n    }\n  }, [selectedFinderItems]);\n\n  useEffect(() => {\n    for (const file of files) {\n      if (!isFileFormatSupported(file)) {\n        showToast({\n          title: \"Invalid file\",\n          message: `The file \"${fileName(file)}\" is not a valid video file. Supported formats are: ${VIDEO_FORMATS.join(\", \")}`,\n          style: Toast.Style.Failure,\n        });\n        setFiles(files.filter((f) => f !== file));\n        return;\n      }\n    }\n  }, [files]);\n\n  const onSubmit = async () => {\n    if (files.length === 0) {\n      showToast({\n        title: \"Select videos first\",\n        style: Toast.Style.Failure,\n      });\n\n      return;\n    }\n    compressVideoFiles(files, compression).then((successfulFiles) => {\n      if (successfulFiles.length === 0) return;\n      successfulFiles.forEach((file) => Clipboard.copy({ file }));\n      navigation.push(<Videos files={successfulFiles} />);\n    });\n  };\n\n  return (\n    <Form\n      isLoading={!clipboard || !selectedFinderItems}\n      actions={\n        <ActionPanel>\n          <Action.SubmitForm title=\"Compress Files\" onSubmit={onSubmit} />\n        </ActionPanel>\n      }\n    >\n      {autoLoaded && files.length > 0 ? (\n        <Form.Description text=\"\u2714\uFE0E Loaded files from your clipboard or Finder\" />\n      ) : (\n        <Form.Description text=\"You can also copy some videos or select them in the Finder and launch this command again\" />\n      )}\n      <Form.FilePicker\n        id=\"files\"\n        value={files}\n        onChange={setFiles}\n        allowMultipleSelection\n        title=\"Choose Video Files\"\n        info=\"Any files you copy or select in the Finder will show up here\"\n      />\n      <Form.Dropdown\n        id=\"compression\"\n        title=\"Compression\"\n        value={compression}\n        onChange={(value) => setCompression(value as CompressionOptionKey)}\n      >\n        {Object.keys(COMPRESSION_OPTIONS).map((key) => (\n          <Form.Dropdown.Item key={key} value={key} title={capitalizeSnakeCase(key)} />\n        ))}\n      </Form.Dropdown>\n    </Form>\n  );\n}\n", "import { getPreferenceValues } from \"@raycast/api\";\n\nexport type CompressionOptionKey = \"best_quality\" | \"balanced\" | \"small_file\" | \"very_small_file\";\nexport type CompressionOption = { crf: number; bitrate: string; bufsize: string };\nexport const COMPRESSION_OPTIONS: Record<CompressionOptionKey, CompressionOption> = {\n  best_quality: { crf: 23, bitrate: \"3000k\", bufsize: \"6000k\" },\n  balanced: { crf: 28, bitrate: \"2000k\", bufsize: \"4000k\" },\n  small_file: { crf: 35, bitrate: \"1000k\", bufsize: \"2000k\" },\n  very_small_file: { crf: 42, bitrate: \"500k\", bufsize: \"1000k\" },\n};\nexport const DEFAULT_COMPRESSION: CompressionOptionKey = \"balanced\";\nexport const VIDEO_FORMATS = [\"mp4\", \"mov\", \"avi\", \"mkv\", \"webm\", \"gif\"];\nexport const PATH = [\n  \".\",\n  \"/bin\",\n  \"~/.bin\",\n  \"/usr/bin\",\n  \"/usr/gnu/bin\",\n  \"/usr/local/bin\",\n  \"/opt/homebrew/bin\",\n  \"/opt/homebrew/sbin\",\n  \"/usr/local/Cellar/ffmpeg\",\n].join(\":\");\nexport const FFMPEG_BINARY_CUSTOM_PATH = getPreferenceValues().ffmpeg_path ?? \"/opt/homebrew/bin/ffmpeg\";\n", "import { Toast, showToast } from \"@raycast/api\";\nimport { exec, execSync } from \"child_process\";\nimport fs, { existsSync } from \"fs\";\nimport { promisify } from \"util\";\nimport { COMPRESSION_OPTIONS, CompressionOptionKey, FFMPEG_BINARY_CUSTOM_PATH, PATH, VIDEO_FORMATS } from \"./constants\";\n\nconst ffmpegPathExists = (): boolean => {\n  try {\n    return existsSync(FFMPEG_BINARY_CUSTOM_PATH);\n  } catch (error) {\n    return false;\n  }\n};\n\nconst isFFmpegInstalledOnPath = (): boolean => {\n  try {\n    const result = execSync(`zsh -l -c 'PATH=${PATH} ffmpeg -version'`).toString();\n    if (result.includes(\"ffmpeg version\")) {\n      return true;\n    }\n    return false;\n  } catch (error) {\n    return false;\n  }\n};\n\nexport function normalizeFilePath(filePath: string): string {\n  return filePath.replace(/^file:\\/\\//, \"\").replace(/%20/g, \" \");\n}\n\nexport function fileName(filePath: string): string {\n  return filePath.split(\"/\").pop()!;\n}\n\nexport function unique<T>(array: T[]): T[] {\n  return [...new Set(array)];\n}\n\nexport function fileExists(file: string) {\n  return fs.existsSync(file);\n}\n\nconst getFFmpegCommand = (args: string) => {\n  const isInPath = isFFmpegInstalledOnPath();\n  const customPathExists = ffmpegPathExists();\n\n  if (isInPath) {\n    return `zsh -l -c 'PATH=${PATH} ffmpeg ${args}'`;\n  } else if (customPathExists) {\n    return `${FFMPEG_BINARY_CUSTOM_PATH} ${args}`;\n  } else {\n    showToast({\n      title: \"Error\",\n      message: \"FFmpeg is not installed. Please install FFmpeg or specify its path in the extension settings.\",\n      style: Toast.Style.Failure,\n    });\n    return null;\n  }\n};\n\nexport function sanitizeFileName(file: string): string {\n  return file\n    .replace(/\\\\/g, \"\\\\\\\\\")\n    .replace(/ /g, \"\\\\ \")\n    .replace(/`/g, \"\\\\`\")\n    .replace(/\"/g, `\\\\\"`)\n    .replace(/\\$/g, `\\\\$`)\n    .replace(/\\(/g, \"\\\\(\")\n    .replace(/\\)/g, \"\\\\)\");\n}\n\nexport async function compressVideoFiles(files: string[], compression: CompressionOptionKey): Promise<string[]> {\n  const one = files.length === 1;\n  await showToast(Toast.Style.Animated, one ? \"Compressing video...\" : \"Compressing videos...\");\n\n  const results = await Promise.all(\n    files.map(async (file) => {\n      const output = file.replace(/\\.\\w+$/, ` (yafw ${compression}).mp4`);\n      const { crf, bitrate, bufsize } = COMPRESSION_OPTIONS[compression];\n      const command = getFFmpegCommand(\n        `-y -i ${sanitizeFileName(file)} -vcodec libx264 -crf ${crf} -b:v ${bitrate} -bufsize ${bufsize} ${sanitizeFileName(output)}`,\n      );\n\n      if (!command) {\n        return [];\n      }\n\n      return promisify(exec)(command).then(({ stdout, stderr }) => {\n        console.log(stdout);\n        console.log(stderr);\n        return output;\n      });\n    }),\n  );\n\n  const successfulFiles = results.filter(Boolean) as string[];\n\n  if (successfulFiles.length !== files.length) {\n    showToast({\n      title: \"Error\",\n      message: \"Some files could not be compressed.\",\n      style: Toast.Style.Failure,\n    });\n  } else {\n    showToast({\n      title: \"Success\",\n      message: `Successfully compressed all files.`,\n      style: Toast.Style.Success,\n    });\n  }\n\n  return successfulFiles;\n}\n\nexport function capitalizeSnakeCase(text: string): string {\n  return text\n    .split(\"_\")\n    .map((part) => part.charAt(0).toUpperCase() + part.slice(1))\n    .join(\" \");\n}\n\nexport function isFileFormatSupported(_filename: string): boolean {\n  const filename = _filename.toLowerCase();\n  return VIDEO_FORMATS.some((format) => filename.endsWith(format));\n}\n", "import { Action, ActionPanel, Grid, Icon, showInFinder } from \"@raycast/api\";\nimport { useEffect, useState } from \"react\";\nimport { getHistoryFromStorage, saveHistoryToStorage } from \"./storage\";\nimport { fileName, unique } from \"./utils\";\n\nexport function Videos(props: { files: string[] }) {\n  const [history, setHistory] = useState<string[] | null>(null);\n  const [allFiles, setAllFiles] = useState<string[]>(props.files);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    getHistoryFromStorage()\n      .then((fromStorage) => {\n        if (fromStorage) setHistory(fromStorage);\n        else setHistory([]);\n      })\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  useEffect(() => {\n    if (history) {\n      const newFiles = [...props.files, ...history];\n      setAllFiles(newFiles);\n      saveHistoryToStorage(newFiles);\n    }\n  }, [history, props.files]);\n\n  const removeFromHistory = (file: string) => {\n    saveHistoryToStorage(allFiles.filter((f) => f !== file));\n    setAllFiles(allFiles.filter((f) => f !== file));\n  };\n\n  const clearAllHistory = () => {\n    saveHistoryToStorage([]);\n    setAllFiles([]);\n  };\n\n  return (\n    <Grid isLoading={isLoading}>\n      {unique(allFiles).map((file, index) => (\n        <Grid.Item\n          id={index.toString()}\n          key={file}\n          title={fileName(file)}\n          content={{ fileIcon: file }}\n          quickLook={{ path: file }}\n          accessory={\n            index < props.files.length ? { icon: { source: Icon.Checkmark, tintColor: \"#008080\" } } : undefined\n          }\n          actions={\n            <ActionPanel>\n              <Action.CopyToClipboard content={{ file }} />\n              <Action.ToggleQuickLook />\n              <Action.Open title=\"Open\" target={file} />\n              <Action.OpenWith path={file} />\n              <Action title=\"Open in Finder\" onAction={() => showInFinder(file)} icon={{ source: Icon.Finder }} />\n              <Action\n                title=\"Remove From History\"\n                style={Action.Style.Destructive}\n                onAction={() => removeFromHistory(file)}\n                icon={{ source: Icon.Trash }}\n              />\n              <Action\n                title=\"Clear All History\"\n                style={Action.Style.Destructive}\n                onAction={clearAllHistory}\n                icon={{ source: Icon.Trash }}\n              />\n            </ActionPanel>\n          }\n        />\n      ))}\n    </Grid>\n  );\n}\n", "import { LocalStorage } from \"@raycast/api\";\nimport { fileExists } from \"./utils\";\n\ntype StorageItem = {\n  file: string;\n  timestamp: number;\n};\n\nconst STORAGE_KEY = \"videos-history\";\nconst OLDER_THAN = 1000 * 60 * 60 * 24 * 7; // 1 week\n\nfunction isNotTooOld({ timestamp }: StorageItem) {\n  return Date.now() - timestamp < OLDER_THAN;\n}\n\nexport async function saveHistoryToStorage(files: string[]) {\n  const items: StorageItem[] = files.map((file) => ({ file, timestamp: Date.now() }));\n  return LocalStorage.setItem(STORAGE_KEY, JSON.stringify(items));\n}\n\nexport async function getHistoryFromStorage(): Promise<string[] | null> {\n  const items = await LocalStorage.getItem(STORAGE_KEY);\n  if (!items) return null;\n  if (typeof items !== \"string\") return null;\n\n  const parsedItems: StorageItem[] = JSON.parse(items);\n  return parsedItems\n    .filter(isNotTooOld)\n    .map((item) => item.file)\n    .filter(fileExists);\n}\n\nexport async function removeFromHistoryStorage(file: string) {\n  const items = await LocalStorage.getItem(STORAGE_KEY);\n  if (!items) return;\n  if (typeof items !== \"string\") return null;\n\n  const parsedItems: StorageItem[] = JSON.parse(items);\n\n  const newItems = parsedItems.filter((item) => item.file !== file);\n  return LocalStorage.setItem(STORAGE_KEY, JSON.stringify(newItems));\n}\n"],
  "mappings": "ikBAAA,IAAAA,GAAA,GAAAC,GAAAD,GAAA,aAAAE,IAAA,eAAAC,GAAAH,IAAA,IAAAI,EAUO,wBACPC,EAAoC,iBCXpC,IAAAC,EAAoC,wBAIvBC,EAAuE,CAClF,aAAc,CAAE,IAAK,GAAI,QAAS,QAAS,QAAS,OAAQ,EAC5D,SAAU,CAAE,IAAK,GAAI,QAAS,QAAS,QAAS,OAAQ,EACxD,WAAY,CAAE,IAAK,GAAI,QAAS,QAAS,QAAS,OAAQ,EAC1D,gBAAiB,CAAE,IAAK,GAAI,QAAS,OAAQ,QAAS,OAAQ,CAChE,EACaC,EAA4C,WAC5CC,EAAgB,CAAC,MAAO,MAAO,MAAO,MAAO,OAAQ,KAAK,EAC1DC,EAAO,CAClB,IACA,OACA,SACA,WACA,eACA,iBACA,oBACA,qBACA,0BACF,EAAE,KAAK,GAAG,EACGC,KAA4B,uBAAoB,EAAE,aAAe,2BCvB9E,IAAAC,EAAiC,wBACjCC,EAA+B,yBAC/BC,EAA+B,kBAC/BC,EAA0B,gBAG1B,IAAMC,GAAmB,IAAe,CACtC,GAAI,CACF,SAAO,cAAWC,CAAyB,CAC7C,MAAgB,CACd,MAAO,EACT,CACF,EAEMC,GAA0B,IAAe,CAC7C,GAAI,CAEF,MAAI,KADW,YAAS,mBAAmBC,CAAI,mBAAmB,EAAE,SAAS,EAClE,SAAS,gBAAgB,CAItC,MAAgB,CACd,MAAO,EACT,CACF,EAEO,SAASC,EAAkBC,EAA0B,CAC1D,OAAOA,EAAS,QAAQ,aAAc,EAAE,EAAE,QAAQ,OAAQ,GAAG,CAC/D,CAEO,SAASC,EAASD,EAA0B,CACjD,OAAOA,EAAS,MAAM,GAAG,EAAE,IAAI,CACjC,CAEO,SAASE,EAAUC,EAAiB,CACzC,MAAO,CAAC,GAAG,IAAI,IAAIA,CAAK,CAAC,CAC3B,CAEO,SAASC,EAAWC,EAAc,CACvC,OAAO,EAAAC,QAAG,WAAWD,CAAI,CAC3B,CAEA,IAAME,GAAoBC,GAAiB,CACzC,IAAMC,EAAWZ,GAAwB,EACnCa,EAAmBf,GAAiB,EAE1C,OAAIc,EACK,mBAAmBX,CAAI,WAAWU,CAAI,IACpCE,EACF,GAAGd,CAAyB,IAAIY,CAAI,OAE3C,aAAU,CACR,MAAO,QACP,QAAS,gGACT,MAAO,QAAM,MAAM,OACrB,CAAC,EACM,KAEX,EAEO,SAASG,EAAiBN,EAAsB,CACrD,OAAOA,EACJ,QAAQ,MAAO,MAAM,EACrB,QAAQ,KAAM,KAAK,EACnB,QAAQ,KAAM,KAAK,EACnB,QAAQ,KAAM,KAAK,EACnB,QAAQ,MAAO,KAAK,EACpB,QAAQ,MAAO,KAAK,EACpB,QAAQ,MAAO,KAAK,CACzB,CAEA,eAAsBO,EAAmBC,EAAiBC,EAAsD,CAC9G,IAAMC,EAAMF,EAAM,SAAW,EAC7B,QAAM,aAAU,QAAM,MAAM,SAAUE,EAAM,uBAAyB,uBAAuB,EAsB5F,IAAMC,GApBU,MAAM,QAAQ,IAC5BH,EAAM,IAAI,MAAOR,GAAS,CACxB,IAAMY,EAASZ,EAAK,QAAQ,SAAU,UAAUS,CAAW,OAAO,EAC5D,CAAE,IAAAI,EAAK,QAAAC,EAAS,QAAAC,CAAQ,EAAIC,EAAoBP,CAAW,EAC3DQ,EAAUf,GACd,SAASI,EAAiBN,CAAI,CAAC,yBAAyBa,CAAG,SAASC,CAAO,aAAaC,CAAO,IAAIT,EAAiBM,CAAM,CAAC,EAC7H,EAEA,OAAKK,KAIE,aAAU,MAAI,EAAEA,CAAO,EAAE,KAAK,CAAC,CAAE,OAAAC,EAAQ,OAAAC,CAAO,KACrD,QAAQ,IAAID,CAAM,EAClB,QAAQ,IAAIC,CAAM,EACXP,EACR,EAPQ,CAAC,CAQZ,CAAC,CACH,GAEgC,OAAO,OAAO,EAE9C,OAAID,EAAgB,SAAWH,EAAM,UACnC,aAAU,CACR,MAAO,QACP,QAAS,sCACT,MAAO,QAAM,MAAM,OACrB,CAAC,KAED,aAAU,CACR,MAAO,UACP,QAAS,qCACT,MAAO,QAAM,MAAM,OACrB,CAAC,EAGIG,CACT,CAEO,SAASS,EAAoBC,EAAsB,CACxD,OAAOA,EACJ,MAAM,GAAG,EACT,IAAKC,GAASA,EAAK,OAAO,CAAC,EAAE,YAAY,EAAIA,EAAK,MAAM,CAAC,CAAC,EAC1D,KAAK,GAAG,CACb,CAEO,SAASC,EAAsBC,EAA4B,CAChE,IAAMC,EAAWD,EAAU,YAAY,EACvC,OAAOE,EAAc,KAAMC,GAAWF,EAAS,SAASE,CAAM,CAAC,CACjE,CC5HA,IAAAC,EAA8D,wBAC9DC,EAAoC,iBCDpC,IAAAC,EAA6B,wBAQ7B,IAAMC,EAAc,iBACdC,GAAa,IAAO,GAAK,GAAK,GAAK,EAEzC,SAASC,GAAY,CAAE,UAAAC,CAAU,EAAgB,CAC/C,OAAO,KAAK,IAAI,EAAIA,EAAYF,EAClC,CAEA,eAAsBG,EAAqBC,EAAiB,CAC1D,IAAMC,EAAuBD,EAAM,IAAKE,IAAU,CAAE,KAAAA,EAAM,UAAW,KAAK,IAAI,CAAE,EAAE,EAClF,OAAO,eAAa,QAAQP,EAAa,KAAK,UAAUM,CAAK,CAAC,CAChE,CAEA,eAAsBE,GAAkD,CACtE,IAAMF,EAAQ,MAAM,eAAa,QAAQN,CAAW,EAEpD,MADI,CAACM,GACD,OAAOA,GAAU,SAAiB,KAEH,KAAK,MAAMA,CAAK,EAEhD,OAAOJ,EAAW,EAClB,IAAKO,GAASA,EAAK,IAAI,EACvB,OAAOC,CAAU,CACtB,CDoBY,IAAAC,EAAA,6BA7CL,SAASC,EAAOC,EAA4B,CACjD,GAAM,CAACC,EAASC,CAAU,KAAI,YAA0B,IAAI,EACtD,CAACC,EAAUC,CAAW,KAAI,YAAmBJ,EAAM,KAAK,EACxD,CAACK,EAAWC,CAAY,KAAI,YAAS,EAAI,KAE/C,aAAU,IAAM,CACdC,EAAsB,EACnB,KAAMC,GAAgB,CACJN,EAAbM,GACY,CAAC,CADsB,CAEzC,CAAC,EACA,QAAQ,IAAMF,EAAa,EAAK,CAAC,CACtC,EAAG,CAAC,CAAC,KAEL,aAAU,IAAM,CACd,GAAIL,EAAS,CACX,IAAMQ,EAAW,CAAC,GAAGT,EAAM,MAAO,GAAGC,CAAO,EAC5CG,EAAYK,CAAQ,EACpBC,EAAqBD,CAAQ,CAC/B,CACF,EAAG,CAACR,EAASD,EAAM,KAAK,CAAC,EAEzB,IAAMW,EAAqBC,GAAiB,CAC1CF,EAAqBP,EAAS,OAAQU,GAAMA,IAAMD,CAAI,CAAC,EACvDR,EAAYD,EAAS,OAAQU,GAAMA,IAAMD,CAAI,CAAC,CAChD,EAEME,EAAkB,IAAM,CAC5BJ,EAAqB,CAAC,CAAC,EACvBN,EAAY,CAAC,CAAC,CAChB,EAEA,SACE,OAAC,QAAK,UAAWC,EACd,SAAAU,EAAOZ,CAAQ,EAAE,IAAI,CAACS,EAAMI,OAC3B,OAAC,OAAK,KAAL,CACC,GAAIA,EAAM,SAAS,EAEnB,MAAOC,EAASL,CAAI,EACpB,QAAS,CAAE,SAAUA,CAAK,EAC1B,UAAW,CAAE,KAAMA,CAAK,EACxB,UACEI,EAAQhB,EAAM,MAAM,OAAS,CAAE,KAAM,CAAE,OAAQ,OAAK,UAAW,UAAW,SAAU,CAAE,EAAI,OAE5F,WACE,QAAC,eACC,oBAAC,SAAO,gBAAP,CAAuB,QAAS,CAAE,KAAAY,CAAK,EAAG,KAC3C,OAAC,SAAO,gBAAP,EAAuB,KACxB,OAAC,SAAO,KAAP,CAAY,MAAM,OAAO,OAAQA,EAAM,KACxC,OAAC,SAAO,SAAP,CAAgB,KAAMA,EAAM,KAC7B,OAAC,UAAO,MAAM,iBAAiB,SAAU,OAAM,gBAAaA,CAAI,EAAG,KAAM,CAAE,OAAQ,OAAK,MAAO,EAAG,KAClG,OAAC,UACC,MAAM,sBACN,MAAO,SAAO,MAAM,YACpB,SAAU,IAAMD,EAAkBC,CAAI,EACtC,KAAM,CAAE,OAAQ,OAAK,KAAM,EAC7B,KACA,OAAC,UACC,MAAM,oBACN,MAAO,SAAO,MAAM,YACpB,SAAUE,EACV,KAAM,CAAE,OAAQ,OAAK,KAAM,EAC7B,GACF,GA1BGF,CA4BP,CACD,EACH,CAEJ,CHmCsB,IAAAM,EAAA,6BArFP,SAARC,GAA2B,CAChC,GAAM,CAACC,EAAOC,CAAS,KAAI,YAAmB,CAAC,CAAC,EAC1C,CAACC,EAAcC,CAAe,KAAI,YAAmB,CAAC,CAAC,EACvD,CAACC,EAAWC,CAAY,KAAI,YAAuC,IAAI,EACvE,CAACC,EAAqBC,CAAsB,KAAI,YAAkC,IAAI,EACtF,CAACC,EAAYC,CAAa,KAAI,YAAS,EAAK,EAC5C,CAACC,EAAaC,CAAc,KAAI,YAA+BC,CAAmB,EAClFC,KAAa,iBAAc,EAG3BC,EAAW,CAACC,EAAoBC,EAAqB,KAAU,CAInE,GAHAD,EAAWE,EAAOF,EAAS,IAAIG,CAAiB,CAAC,EAEtBH,EAAS,OAASf,EAAM,OAC3B,CACtB,IAAMmB,EAAmBnB,EAAM,KAAMoB,GAAS,CAACL,EAAS,SAASK,CAAI,CAAC,EACtEjB,EAAgB,CAAC,GAAGD,EAAciB,CAAiB,CAAC,CACtD,MAAWH,GACTP,EAAc,EAAI,EAElBM,EAAWA,EAAS,OAAQK,GAAS,CAAClB,EAAa,SAASkB,CAAI,CAAC,GAGjEjB,EAAgBD,EAAa,OAAQkB,GAAS,CAACL,EAAS,SAASK,CAAI,CAAC,CAAC,EAGzE,OAAAL,EAAWA,EAAS,OAAOM,CAAU,EAE9BpB,EAAUc,CAAQ,CAC3B,KAEA,aAAU,IAAM,EACc,IAAM,CAChC,YAAU,KAAK,EAAE,KAAKV,CAAY,KAClC,0BAAuB,EACpB,KAAKE,CAAsB,EAC3B,MAAM,IAAMA,EAAuB,CAAC,CAAC,CAAC,CAC3C,GACoB,CACtB,EAAG,CAACF,EAAcE,CAAsB,CAAC,KAEzC,aAAU,IAAM,CACVH,GAAa,SAAUA,GAAa,CAACJ,EAAM,SAASI,EAAU,IAAK,GACjEA,EAAU,MAAQkB,EAAsBlB,EAAU,IAAI,GACxDU,EAAS,CAAC,GAAGd,EAAOI,EAAU,IAAK,EAAG,EAAI,CAGhD,EAAG,CAACA,CAAS,CAAC,KAEd,aAAU,IAAM,CACd,GAAIE,EACF,QAAWiB,KAAQjB,EACbiB,EAAK,MAAQD,EAAsBC,EAAK,IAAI,GAC9CT,EAAS,CAAC,GAAGd,EAAOuB,EAAK,IAAI,EAAG,EAAI,CAI5C,EAAG,CAACjB,CAAmB,CAAC,KAExB,aAAU,IAAM,CACd,QAAWc,KAAQpB,EACjB,GAAI,CAACsB,EAAsBF,CAAI,EAAG,IAChC,aAAU,CACR,MAAO,eACP,QAAS,aAAaI,EAASJ,CAAI,CAAC,uDAAuDK,EAAc,KAAK,IAAI,CAAC,GACnH,MAAO,QAAM,MAAM,OACrB,CAAC,EACDX,EAASd,EAAM,OAAQ0B,GAAMA,IAAMN,CAAI,CAAC,EACxC,MACF,CAEJ,EAAG,CAACpB,CAAK,CAAC,EAEV,IAAM2B,EAAW,SAAY,CAC3B,GAAI3B,EAAM,SAAW,EAAG,IACtB,aAAU,CACR,MAAO,sBACP,MAAO,QAAM,MAAM,OACrB,CAAC,EAED,MACF,CACA4B,EAAmB5B,EAAOU,CAAW,EAAE,KAAMmB,GAAoB,CAC3DA,EAAgB,SAAW,IAC/BA,EAAgB,QAAST,GAAS,YAAU,KAAK,CAAE,KAAAA,CAAK,CAAC,CAAC,EAC1DP,EAAW,QAAK,OAACiB,EAAA,CAAO,MAAOD,EAAiB,CAAE,EACpD,CAAC,CACH,EAEA,SACE,QAAC,QACC,UAAW,CAACzB,GAAa,CAACE,EAC1B,WACE,OAAC,eACC,mBAAC,SAAO,WAAP,CAAkB,MAAM,iBAAiB,SAAUqB,EAAU,EAChE,EAGD,UAAAnB,GAAcR,EAAM,OAAS,KAC5B,OAAC,OAAK,YAAL,CAAiB,KAAK,0DAAgD,KAEvE,OAAC,OAAK,YAAL,CAAiB,KAAK,2FAA2F,KAEpH,OAAC,OAAK,WAAL,CACC,GAAG,QACH,MAAOA,EACP,SAAUc,EACV,uBAAsB,GACtB,MAAM,qBACN,KAAK,+DACP,KACA,OAAC,OAAK,SAAL,CACC,GAAG,cACH,MAAM,cACN,MAAOJ,EACP,SAAWqB,GAAUpB,EAAeoB,CAA6B,EAEhE,gBAAO,KAAKC,CAAmB,EAAE,IAAKC,MACrC,OAAC,OAAK,SAAS,KAAd,CAA6B,MAAOA,EAAK,MAAOC,EAAoBD,CAAG,GAA/CA,CAAkD,CAC5E,EACH,GACF,CAEJ",
  "names": ["index_exports", "__export", "Command", "__toCommonJS", "import_api", "import_react", "import_api", "COMPRESSION_OPTIONS", "DEFAULT_COMPRESSION", "VIDEO_FORMATS", "PATH", "FFMPEG_BINARY_CUSTOM_PATH", "import_api", "import_child_process", "import_fs", "import_util", "ffmpegPathExists", "FFMPEG_BINARY_CUSTOM_PATH", "isFFmpegInstalledOnPath", "PATH", "normalizeFilePath", "filePath", "fileName", "unique", "array", "fileExists", "file", "fs", "getFFmpegCommand", "args", "isInPath", "customPathExists", "sanitizeFileName", "compressVideoFiles", "files", "compression", "one", "successfulFiles", "output", "crf", "bitrate", "bufsize", "COMPRESSION_OPTIONS", "command", "stdout", "stderr", "capitalizeSnakeCase", "text", "part", "isFileFormatSupported", "_filename", "filename", "VIDEO_FORMATS", "format", "import_api", "import_react", "import_api", "STORAGE_KEY", "OLDER_THAN", "isNotTooOld", "timestamp", "saveHistoryToStorage", "files", "items", "file", "getHistoryFromStorage", "item", "fileExists", "import_jsx_runtime", "Videos", "props", "history", "setHistory", "allFiles", "setAllFiles", "isLoading", "setIsLoading", "getHistoryFromStorage", "fromStorage", "newFiles", "saveHistoryToStorage", "removeFromHistory", "file", "f", "clearAllHistory", "unique", "index", "fileName", "import_jsx_runtime", "Command", "files", "_setFiles", "removedFiles", "setRemovedFiles", "clipboard", "setClipboard", "selectedFinderItems", "setSelectedFinderItems", "autoLoaded", "setAutoLoaded", "compression", "setCompression", "DEFAULT_COMPRESSION", "navigation", "setFiles", "newFiles", "automaticallyAdded", "unique", "normalizeFilePath", "fileBeingRemoved", "file", "fileExists", "isFileFormatSupported", "item", "fileName", "VIDEO_FORMATS", "f", "onSubmit", "compressVideoFiles", "successfulFiles", "Videos", "value", "COMPRESSION_OPTIONS", "key", "capitalizeSnakeCase"]
}
